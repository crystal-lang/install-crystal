{"version":3,"file":"AvroReader.js","sourceRoot":"","sources":["../../../../storage-internal-avro/src/AvroReader.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AvroReadable } from \"./AvroReadable\";\nimport {\n  AVRO_SYNC_MARKER_SIZE,\n  AVRO_INIT_BYTES,\n  AVRO_CODEC_KEY,\n  AVRO_SCHEMA_KEY\n} from \"./AvroConstants\";\nimport { arraysEqual } from \"./utils/utils.common\";\nimport { AvroType, AvroParser } from \"./AvroParser\";\nimport \"@azure/core-paging\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * Options to configure the {@link AvroReader.parseObjects} operation.\n */\nexport interface AvroParseOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\nexport class AvroReader {\n  private readonly _dataStream: AvroReadable;\n\n  private readonly _headerStream: AvroReadable;\n\n  private _syncMarker?: Uint8Array;\n\n  private _metadata?: Record<string, string>;\n\n  private _itemType?: AvroType;\n\n  private _itemsRemainingInBlock?: number;\n\n  // Remembers where we started if partial data stream was provided.\n  private readonly _initialBlockOffset: number;\n\n  /// The byte offset within the Avro file (both header and data)\n  /// of the start of the current block.\n  private _blockOffset: number;\n  public get blockOffset(): number {\n    return this._blockOffset;\n  }\n\n  private _objectIndex: number;\n  public get objectIndex(): number {\n    return this._objectIndex;\n  }\n\n  private _initialized: boolean;\n\n  constructor(dataStream: AvroReadable);\n\n  constructor(\n    dataStream: AvroReadable,\n    headerStream: AvroReadable,\n    currentBlockOffset: number,\n    indexWithinCurrentBlock: number\n  );\n\n  constructor(\n    dataStream: AvroReadable,\n    headerStream?: AvroReadable,\n    currentBlockOffset?: number,\n    indexWithinCurrentBlock?: number\n  ) {\n    this._dataStream = dataStream;\n    this._headerStream = headerStream || dataStream;\n    this._initialized = false;\n    this._blockOffset = currentBlockOffset || 0;\n    this._objectIndex = indexWithinCurrentBlock || 0;\n    this._initialBlockOffset = currentBlockOffset || 0;\n  }\n\n  private async initialize(options: AvroParseOptions = {}) {\n    const header = await AvroParser.readFixedBytes(this._headerStream, AVRO_INIT_BYTES.length, {\n      abortSignal: options.abortSignal\n    });\n    if (!arraysEqual(header, AVRO_INIT_BYTES)) {\n      throw new Error(\"Stream is not an Avro file.\");\n    }\n\n    // File metadata is written as if defined by the following map schema:\n    // { \"type\": \"map\", \"values\": \"bytes\"}\n    this._metadata = await AvroParser.readMap(this._headerStream, AvroParser.readString, {\n      abortSignal: options.abortSignal\n    });\n\n    // Validate codec\n    const codec = this._metadata![AVRO_CODEC_KEY];\n    if (!(codec == undefined || codec == \"null\")) {\n      throw new Error(\"Codecs are not supported\");\n    }\n\n    // The 16-byte, randomly-generated sync marker for this file.\n    this._syncMarker = await AvroParser.readFixedBytes(this._headerStream, AVRO_SYNC_MARKER_SIZE, {\n      abortSignal: options.abortSignal\n    });\n\n    // Parse the schema\n    const schema = JSON.parse(this._metadata![AVRO_SCHEMA_KEY]);\n    this._itemType = AvroType.fromSchema(schema);\n\n    if (this._blockOffset == 0) {\n      this._blockOffset = this._initialBlockOffset + this._dataStream.position;\n    }\n\n    this._itemsRemainingInBlock = await AvroParser.readLong(this._dataStream, {\n      abortSignal: options.abortSignal\n    });\n    // skip block length\n    await AvroParser.readLong(this._dataStream, { abortSignal: options.abortSignal });\n\n    this._initialized = true;\n    if (this._objectIndex && this._objectIndex > 0) {\n      for (let i = 0; i < this._objectIndex; i++) {\n        await this._itemType.read(this._dataStream, { abortSignal: options.abortSignal });\n        this._itemsRemainingInBlock!--;\n      }\n    }\n  }\n\n  public hasNext(): boolean {\n    return !this._initialized || this._itemsRemainingInBlock! > 0;\n  }\n\n  public async *parseObjects(\n    options: AvroParseOptions = {}\n  ): AsyncIterableIterator<Record<string, any> | null> {\n    if (!this._initialized) {\n      await this.initialize(options);\n    }\n\n    while (this.hasNext()) {\n      const result = await this._itemType!.read(this._dataStream, {\n        abortSignal: options.abortSignal\n      });\n\n      this._itemsRemainingInBlock!--;\n      this._objectIndex!++;\n\n      if (this._itemsRemainingInBlock == 0) {\n        const marker = await AvroParser.readFixedBytes(this._dataStream, AVRO_SYNC_MARKER_SIZE, {\n          abortSignal: options.abortSignal\n        });\n\n        this._blockOffset = this._initialBlockOffset + this._dataStream.position;\n        this._objectIndex = 0;\n\n        if (!arraysEqual(this._syncMarker!, marker)) {\n          throw new Error(\"Stream is not a valid Avro file.\");\n        }\n\n        try {\n          this._itemsRemainingInBlock = await AvroParser.readLong(this._dataStream, {\n            abortSignal: options.abortSignal\n          });\n        } catch (err) {\n          // We hit the end of the stream.\n          this._itemsRemainingInBlock = 0;\n        }\n\n        if (this._itemsRemainingInBlock! > 0) {\n          // Ignore block size\n          await AvroParser.readLong(this._dataStream, { abortSignal: options.abortSignal });\n        }\n      }\n      yield result;\n    }\n  }\n}\n"]}