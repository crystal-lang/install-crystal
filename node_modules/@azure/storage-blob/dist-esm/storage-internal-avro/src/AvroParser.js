// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter, __extends, __generator } from "tslib";
var AvroParser = /** @class */ (function () {
    function AvroParser() {
    }
    /**
     * Reads a fixed number of bytes from the stream.
     *
     * @param stream -
     * @param length -
     * @param options -
     */
    AvroParser.readFixedBytes = function (stream, length, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var bytes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, stream.read(length, { abortSignal: options.abortSignal })];
                    case 1:
                        bytes = _a.sent();
                        if (bytes.length != length) {
                            throw new Error("Hit stream end.");
                        }
                        return [2 /*return*/, bytes];
                }
            });
        });
    };
    /**
     * Reads a single byte from the stream.
     *
     * @param stream -
     * @param options -
     */
    AvroParser.readByte = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var buf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, AvroParser.readFixedBytes(stream, 1, options)];
                    case 1:
                        buf = _a.sent();
                        return [2 /*return*/, buf[0]];
                }
            });
        });
    };
    // int and long are stored in variable-length zig-zag coding.
    // variable-length: https://lucene.apache.org/core/3_5_0/fileformats.html#VInt
    // zig-zag: https://developers.google.com/protocol-buffers/docs/encoding?csw=1#types
    AvroParser.readZigZagLong = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var zigZagEncoded, significanceInBit, byte, haveMoreByte, significanceInFloat, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zigZagEncoded = 0;
                        significanceInBit = 0;
                        _a.label = 1;
                    case 1: return [4 /*yield*/, AvroParser.readByte(stream, options)];
                    case 2:
                        byte = _a.sent();
                        haveMoreByte = byte & 0x80;
                        zigZagEncoded |= (byte & 0x7f) << significanceInBit;
                        significanceInBit += 7;
                        _a.label = 3;
                    case 3:
                        if (haveMoreByte && significanceInBit < 28) return [3 /*break*/, 1];
                        _a.label = 4;
                    case 4:
                        if (!haveMoreByte) return [3 /*break*/, 9];
                        // Switch to float arithmetic
                        zigZagEncoded = zigZagEncoded;
                        significanceInFloat = 268435456; // 2 ** 28.
                        _a.label = 5;
                    case 5: return [4 /*yield*/, AvroParser.readByte(stream, options)];
                    case 6:
                        byte = _a.sent();
                        zigZagEncoded += (byte & 0x7f) * significanceInFloat;
                        significanceInFloat *= 128; // 2 ** 7
                        _a.label = 7;
                    case 7:
                        if (byte & 0x80) return [3 /*break*/, 5];
                        _a.label = 8;
                    case 8:
                        res = (zigZagEncoded % 2 ? -(zigZagEncoded + 1) : zigZagEncoded) / 2;
                        if (res < Number.MIN_SAFE_INTEGER || res > Number.MAX_SAFE_INTEGER) {
                            throw new Error("Integer overflow.");
                        }
                        return [2 /*return*/, res];
                    case 9: return [2 /*return*/, (zigZagEncoded >> 1) ^ -(zigZagEncoded & 1)];
                }
            });
        });
    };
    AvroParser.readLong = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, AvroParser.readZigZagLong(stream, options)];
            });
        });
    };
    AvroParser.readInt = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, AvroParser.readZigZagLong(stream, options)];
            });
        });
    };
    AvroParser.readNull = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, null];
            });
        });
    };
    AvroParser.readBoolean = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var b;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, AvroParser.readByte(stream, options)];
                    case 1:
                        b = _a.sent();
                        if (b == 1) {
                            return [2 /*return*/, true];
                        }
                        else if (b == 0) {
                            return [2 /*return*/, false];
                        }
                        else {
                            throw new Error("Byte was not a boolean.");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AvroParser.readFloat = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var u8arr, view;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, AvroParser.readFixedBytes(stream, 4, options)];
                    case 1:
                        u8arr = _a.sent();
                        view = new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength);
                        return [2 /*return*/, view.getFloat32(0, true)]; // littleEndian = true
                }
            });
        });
    };
    AvroParser.readDouble = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var u8arr, view;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, AvroParser.readFixedBytes(stream, 8, options)];
                    case 1:
                        u8arr = _a.sent();
                        view = new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength);
                        return [2 /*return*/, view.getFloat64(0, true)]; // littleEndian = true
                }
            });
        });
    };
    AvroParser.readBytes = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var size;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, AvroParser.readLong(stream, options)];
                    case 1:
                        size = _a.sent();
                        if (size < 0) {
                            throw new Error("Bytes size was negative.");
                        }
                        return [4 /*yield*/, stream.read(size, { abortSignal: options.abortSignal })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    AvroParser.readString = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var u8arr, utf8decoder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, AvroParser.readBytes(stream, options)];
                    case 1:
                        u8arr = _a.sent();
                        // polyfill TextDecoder to be backward compatible with older
                        // nodejs that doesn't expose TextDecoder as a global variable
                        if (typeof TextDecoder === "undefined" && typeof require !== "undefined") {
                            global.TextDecoder = require("util").TextDecoder;
                        }
                        utf8decoder = new TextDecoder();
                        return [2 /*return*/, utf8decoder.decode(u8arr)];
                }
            });
        });
    };
    AvroParser.readMapPair = function (stream, readItemMethod, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var key, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, AvroParser.readString(stream, options)];
                    case 1:
                        key = _a.sent();
                        return [4 /*yield*/, readItemMethod(stream, options)];
                    case 2:
                        value = _a.sent();
                        return [2 /*return*/, { key: key, value: value }];
                }
            });
        });
    };
    AvroParser.readMap = function (stream, readItemMethod, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var readPairMethod, pairs, dict, _i, pairs_1, pair;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        readPairMethod = function (stream, options) {
                            if (options === void 0) { options = {}; }
                            return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, AvroParser.readMapPair(stream, readItemMethod, options)];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            });
                        };
                        return [4 /*yield*/, AvroParser.readArray(stream, readPairMethod, options)];
                    case 1:
                        pairs = _a.sent();
                        dict = {};
                        for (_i = 0, pairs_1 = pairs; _i < pairs_1.length; _i++) {
                            pair = pairs_1[_i];
                            dict[pair.key] = pair.value;
                        }
                        return [2 /*return*/, dict];
                }
            });
        });
    };
    AvroParser.readArray = function (stream, readItemMethod, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var items, count, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        items = [];
                        return [4 /*yield*/, AvroParser.readLong(stream, options)];
                    case 1:
                        count = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(count != 0)) return [3 /*break*/, 8];
                        if (!(count < 0)) return [3 /*break*/, 4];
                        // Ignore block sizes
                        return [4 /*yield*/, AvroParser.readLong(stream, options)];
                    case 3:
                        // Ignore block sizes
                        _a.sent();
                        count = -count;
                        _a.label = 4;
                    case 4:
                        if (!count--) return [3 /*break*/, 6];
                        return [4 /*yield*/, readItemMethod(stream, options)];
                    case 5:
                        item = _a.sent();
                        items.push(item);
                        return [3 /*break*/, 4];
                    case 6: return [4 /*yield*/, AvroParser.readLong(stream, options)];
                    case 7:
                        count = _a.sent();
                        return [3 /*break*/, 2];
                    case 8: return [2 /*return*/, items];
                }
            });
        });
    };
    return AvroParser;
}());
export { AvroParser };
var AvroComplex;
(function (AvroComplex) {
    AvroComplex["RECORD"] = "record";
    AvroComplex["ENUM"] = "enum";
    AvroComplex["ARRAY"] = "array";
    AvroComplex["MAP"] = "map";
    AvroComplex["UNION"] = "union";
    AvroComplex["FIXED"] = "fixed";
})(AvroComplex || (AvroComplex = {}));
var AvroType = /** @class */ (function () {
    function AvroType() {
    }
    /**
     * Determines the AvroType from the Avro Schema.
     */
    AvroType.fromSchema = function (schema) {
        if (typeof schema === "string") {
            return AvroType.fromStringSchema(schema);
        }
        else if (Array.isArray(schema)) {
            return AvroType.fromArraySchema(schema);
        }
        else {
            return AvroType.fromObjectSchema(schema);
        }
    };
    AvroType.fromStringSchema = function (schema) {
        switch (schema) {
            case AvroPrimitive.NULL:
            case AvroPrimitive.BOOLEAN:
            case AvroPrimitive.INT:
            case AvroPrimitive.LONG:
            case AvroPrimitive.FLOAT:
            case AvroPrimitive.DOUBLE:
            case AvroPrimitive.BYTES:
            case AvroPrimitive.STRING:
                return new AvroPrimitiveType(schema);
            default:
                throw new Error("Unexpected Avro type " + schema);
        }
    };
    AvroType.fromArraySchema = function (schema) {
        return new AvroUnionType(schema.map(AvroType.fromSchema));
    };
    AvroType.fromObjectSchema = function (schema) {
        var type = schema.type;
        // Primitives can be defined as strings or objects
        try {
            return AvroType.fromStringSchema(type);
        }
        catch (err) { }
        switch (type) {
            case AvroComplex.RECORD:
                if (schema.aliases) {
                    throw new Error("aliases currently is not supported, schema: " + schema);
                }
                if (!schema.name) {
                    throw new Error("Required attribute 'name' doesn't exist on schema: " + schema);
                }
                var fields = {};
                if (!schema.fields) {
                    throw new Error("Required attribute 'fields' doesn't exist on schema: " + schema);
                }
                for (var _i = 0, _a = schema.fields; _i < _a.length; _i++) {
                    var field = _a[_i];
                    fields[field.name] = AvroType.fromSchema(field.type);
                }
                return new AvroRecordType(fields, schema.name);
            case AvroComplex.ENUM:
                if (schema.aliases) {
                    throw new Error("aliases currently is not supported, schema: " + schema);
                }
                if (!schema.symbols) {
                    throw new Error("Required attribute 'symbols' doesn't exist on schema: " + schema);
                }
                return new AvroEnumType(schema.symbols);
            case AvroComplex.MAP:
                if (!schema.values) {
                    throw new Error("Required attribute 'values' doesn't exist on schema: " + schema);
                }
                return new AvroMapType(AvroType.fromSchema(schema.values));
            case AvroComplex.ARRAY: // Unused today
            case AvroComplex.FIXED: // Unused today
            default:
                throw new Error("Unexpected Avro type " + type + " in " + schema);
        }
    };
    return AvroType;
}());
export { AvroType };
var AvroPrimitive;
(function (AvroPrimitive) {
    AvroPrimitive["NULL"] = "null";
    AvroPrimitive["BOOLEAN"] = "boolean";
    AvroPrimitive["INT"] = "int";
    AvroPrimitive["LONG"] = "long";
    AvroPrimitive["FLOAT"] = "float";
    AvroPrimitive["DOUBLE"] = "double";
    AvroPrimitive["BYTES"] = "bytes";
    AvroPrimitive["STRING"] = "string";
})(AvroPrimitive || (AvroPrimitive = {}));
var AvroPrimitiveType = /** @class */ (function (_super) {
    __extends(AvroPrimitiveType, _super);
    function AvroPrimitiveType(primitive) {
        var _this = _super.call(this) || this;
        _this._primitive = primitive;
        return _this;
    }
    AvroPrimitiveType.prototype.read = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._primitive;
                        switch (_a) {
                            case AvroPrimitive.NULL: return [3 /*break*/, 1];
                            case AvroPrimitive.BOOLEAN: return [3 /*break*/, 3];
                            case AvroPrimitive.INT: return [3 /*break*/, 5];
                            case AvroPrimitive.LONG: return [3 /*break*/, 7];
                            case AvroPrimitive.FLOAT: return [3 /*break*/, 9];
                            case AvroPrimitive.DOUBLE: return [3 /*break*/, 11];
                            case AvroPrimitive.BYTES: return [3 /*break*/, 13];
                            case AvroPrimitive.STRING: return [3 /*break*/, 15];
                        }
                        return [3 /*break*/, 17];
                    case 1: return [4 /*yield*/, AvroParser.readNull()];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3: return [4 /*yield*/, AvroParser.readBoolean(stream, options)];
                    case 4: return [2 /*return*/, _b.sent()];
                    case 5: return [4 /*yield*/, AvroParser.readInt(stream, options)];
                    case 6: return [2 /*return*/, _b.sent()];
                    case 7: return [4 /*yield*/, AvroParser.readLong(stream, options)];
                    case 8: return [2 /*return*/, _b.sent()];
                    case 9: return [4 /*yield*/, AvroParser.readFloat(stream, options)];
                    case 10: return [2 /*return*/, _b.sent()];
                    case 11: return [4 /*yield*/, AvroParser.readDouble(stream, options)];
                    case 12: return [2 /*return*/, _b.sent()];
                    case 13: return [4 /*yield*/, AvroParser.readBytes(stream, options)];
                    case 14: return [2 /*return*/, _b.sent()];
                    case 15: return [4 /*yield*/, AvroParser.readString(stream, options)];
                    case 16: return [2 /*return*/, _b.sent()];
                    case 17: throw new Error("Unknown Avro Primitive");
                }
            });
        });
    };
    return AvroPrimitiveType;
}(AvroType));
var AvroEnumType = /** @class */ (function (_super) {
    __extends(AvroEnumType, _super);
    function AvroEnumType(symbols) {
        var _this = _super.call(this) || this;
        _this._symbols = symbols;
        return _this;
    }
    AvroEnumType.prototype.read = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, AvroParser.readInt(stream, options)];
                    case 1:
                        value = _a.sent();
                        return [2 /*return*/, this._symbols[value]];
                }
            });
        });
    };
    return AvroEnumType;
}(AvroType));
var AvroUnionType = /** @class */ (function (_super) {
    __extends(AvroUnionType, _super);
    function AvroUnionType(types) {
        var _this = _super.call(this) || this;
        _this._types = types;
        return _this;
    }
    AvroUnionType.prototype.read = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var typeIndex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, AvroParser.readInt(stream, options)];
                    case 1:
                        typeIndex = _a.sent();
                        return [4 /*yield*/, this._types[typeIndex].read(stream, options)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return AvroUnionType;
}(AvroType));
var AvroMapType = /** @class */ (function (_super) {
    __extends(AvroMapType, _super);
    function AvroMapType(itemType) {
        var _this = _super.call(this) || this;
        _this._itemType = itemType;
        return _this;
    }
    AvroMapType.prototype.read = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var readItemMethod;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        readItemMethod = function (s, options) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._itemType.read(s, options)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); };
                        return [4 /*yield*/, AvroParser.readMap(stream, readItemMethod, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return AvroMapType;
}(AvroType));
var AvroRecordType = /** @class */ (function (_super) {
    __extends(AvroRecordType, _super);
    function AvroRecordType(fields, name) {
        var _this = _super.call(this) || this;
        _this._fields = fields;
        _this._name = name;
        return _this;
    }
    AvroRecordType.prototype.read = function (stream, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var record, _a, _b, _i, key, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        record = {};
                        record["$schema"] = this._name;
                        _a = [];
                        for (_b in this._fields)
                            _a.push(_b);
                        _i = 0;
                        _e.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        key = _a[_i];
                        if (!this._fields.hasOwnProperty(key)) return [3 /*break*/, 3];
                        _c = record;
                        _d = key;
                        return [4 /*yield*/, this._fields[key].read(stream, options)];
                    case 2:
                        _c[_d] = _e.sent();
                        _e.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, record];
                }
            });
        });
    };
    return AvroRecordType;
}(AvroType));
//# sourceMappingURL=AvroParser.js.map