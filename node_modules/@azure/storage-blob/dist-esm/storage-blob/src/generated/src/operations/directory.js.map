{"version":3,"file":"directory.js","sourceRoot":"","sources":["../../../../../../src/generated/src/operations/directory.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  DirectoryCreateOptionalParams,\n  DirectoryCreateResponse,\n  DirectoryRenameOptionalParams,\n  DirectoryRenameResponse,\n  DirectoryDeleteOptionalParams,\n  DirectoryDeleteResponse,\n  DirectorySetAccessControlOptionalParams,\n  DirectorySetAccessControlResponse,\n  DirectoryGetAccessControlOptionalParams,\n  DirectoryGetAccessControlResponse\n} from \"../models\";\n\n/** Class representing a Directory. */\nexport class Directory {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Directory class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Create a directory. By default, the destination is overwritten and if the destination already exists\n   * and has a lease the lease is broken. This operation supports conditional HTTP requests.  For more\n   * information, see [Specifying Conditional Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   *  To fail if the destination already exists, use a conditional request with If-None-Match: \"*\".\n   * @param options The options parameters.\n   */\n  create(\n    options?: DirectoryCreateOptionalParams\n  ): Promise<DirectoryCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<DirectoryCreateResponse>;\n  }\n\n  /**\n   * Rename a directory. By default, the destination is overwritten and if the destination already exists\n   * and has a lease the lease is broken. This operation supports conditional HTTP requests. For more\n   * information, see [Specifying Conditional Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * To fail if the destination already exists, use a conditional request with If-None-Match: \"*\".\n   * @param renameSource The file or directory to be renamed. The value must have the following format:\n   *                     \"/{filesysystem}/{path}\".  If \"x-ms-properties\" is specified, the properties will overwrite the\n   *                     existing properties; otherwise, the existing properties will be preserved.\n   * @param options The options parameters.\n   */\n  rename(\n    renameSource: string,\n    options?: DirectoryRenameOptionalParams\n  ): Promise<DirectoryRenameResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      renameSource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      renameOperationSpec\n    ) as Promise<DirectoryRenameResponse>;\n  }\n\n  /**\n   * Deletes the directory\n   * @param recursiveDirectoryDelete If \"true\", all paths beneath the directory will be deleted. If\n   *                                 \"false\" and the directory is non-empty, an error occurs.\n   * @param options The options parameters.\n   */\n  delete(\n    recursiveDirectoryDelete: boolean,\n    options?: DirectoryDeleteOptionalParams\n  ): Promise<DirectoryDeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      recursiveDirectoryDelete,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<DirectoryDeleteResponse>;\n  }\n\n  /**\n   * Set the owner, group, permissions, or access control list for a directory.\n   * @param options The options parameters.\n   */\n  setAccessControl(\n    options?: DirectorySetAccessControlOptionalParams\n  ): Promise<DirectorySetAccessControlResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setAccessControlOperationSpec\n    ) as Promise<DirectorySetAccessControlResponse>;\n  }\n\n  /**\n   * Get the owner, group, permissions, or access control list for a directory.\n   * @param options The options parameters.\n   */\n  getAccessControl(\n    options?: DirectoryGetAccessControlOptionalParams\n  ): Promise<DirectoryGetAccessControlResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccessControlOperationSpec\n    ) as Promise<DirectoryGetAccessControlResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.DirectoryCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.DataLakeStorageError,\n      headersMapper: Mappers.DirectoryCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.resource],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.directoryProperties,\n    Parameters.posixPermissions,\n    Parameters.posixUmask,\n    Parameters.cacheControl,\n    Parameters.contentType1,\n    Parameters.contentEncoding,\n    Parameters.contentLanguage,\n    Parameters.contentDisposition,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renameOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.DirectoryRenameHeaders\n    },\n    default: {\n      bodyMapper: Mappers.DataLakeStorageError,\n      headersMapper: Mappers.DirectoryRenameExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker1,\n    Parameters.pathRenameMode\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.sourceLeaseId,\n    Parameters.directoryProperties,\n    Parameters.posixPermissions,\n    Parameters.posixUmask,\n    Parameters.cacheControl,\n    Parameters.contentType1,\n    Parameters.contentEncoding,\n    Parameters.contentLanguage,\n    Parameters.contentDisposition,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.renameSource,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectoryDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.DataLakeStorageError,\n      headersMapper: Mappers.DirectoryDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker1,\n    Parameters.recursiveDirectoryDelete\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setAccessControlOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectorySetAccessControlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.DataLakeStorageError,\n      headersMapper: Mappers.DirectorySetAccessControlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.action5],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.posixPermissions,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.owner,\n    Parameters.group,\n    Parameters.posixAcl\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccessControlOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectoryGetAccessControlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.DataLakeStorageError,\n      headersMapper: Mappers.DirectoryGetAccessControlExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.action6,\n    Parameters.upn\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"]}