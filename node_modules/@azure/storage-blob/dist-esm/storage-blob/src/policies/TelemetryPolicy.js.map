{"version":3,"file":"TelemetryPolicy.js","sourceRoot":"","sources":["../../../../src/policies/TelemetryPolicy.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EACL,iBAAiB,EACjB,WAAW,EAEX,MAAM,EAIP,MAAM,kBAAkB,CAAC;AAE1B,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAErD;;GAEG;AACH;IAAqC,mCAAiB;IAMpD;;;;;OAKG;IACH,yBAAY,UAAyB,EAAE,OAA6B,EAAE,SAAiB;QAAvF,YACE,kBAAM,UAAU,EAAE,OAAO,CAAC,SAE3B;QADC,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;;IAC7B,CAAC;IAED;;;;OAIG;IACU,qCAAW,GAAxB,UAAyB,OAAoB;;;gBAC3C,IAAI,MAAM,EAAE;oBACV,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;wBACpB,OAAO,CAAC,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;qBACrC;oBACD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE;wBACpD,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;qBACjE;iBACF;gBAED,sBAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,EAAC;;;KAC9C;IACH,sBAAC;AAAD,CAAC,AAlCD,CAAqC,iBAAiB,GAkCrD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  HttpHeaders,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Telemetry string.\n   */\n  public readonly telemetry: string;\n\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param nextPolicy -\n   * @param options -\n   * @param telemetry -\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, telemetry: string) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n        request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n      }\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"]}