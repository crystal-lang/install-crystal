import { __assign, __awaiter, __generator } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { generateUuid } from "@azure/core-http";
import { StorageClientContext } from "./generated/src/index";
import { SpanStatusCode } from "@azure/core-tracing";
import { Blob as StorageBlob, Container } from "./generated/src/operations";
import { ETagNone } from "./utils/constants";
import { convertTracingToRequestOptionsBase, createSpan } from "./utils/tracing";
/**
 * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.
 */
var BlobLeaseClient = /** @class */ (function () {
    /**
     * Creates an instance of BlobLeaseClient.
     * @param client - The client to make the lease operation requests.
     * @param leaseId - Initial proposed lease id.
     */
    function BlobLeaseClient(client, leaseId) {
        var clientContext = new StorageClientContext(client.url, client.pipeline.toServiceClientOptions());
        this._url = client.url;
        if (client.name === undefined) {
            this._isContainer = true;
            this._containerOrBlobOperation = new Container(clientContext);
        }
        else {
            this._isContainer = false;
            this._containerOrBlobOperation = new StorageBlob(clientContext);
        }
        if (!leaseId) {
            leaseId = generateUuid();
        }
        this._leaseId = leaseId;
    }
    Object.defineProperty(BlobLeaseClient.prototype, "leaseId", {
        /**
         * Gets the lease Id.
         *
         * @readonly
         */
        get: function () {
            return this._leaseId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobLeaseClient.prototype, "url", {
        /**
         * Gets the url.
         *
         * @readonly
         */
        get: function () {
            return this._url;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Establishes and manages a lock on a container for delete operations, or on a blob
     * for write and delete operations.
     * The lock duration can be 15 to 60 seconds, or can be infinite.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param duration - Must be between 15 to 60 seconds, or infinite (-1)
     * @param options - option to configure lease management operations.
     * @returns Response data for acquire lease operation.
     */
    BlobLeaseClient.prototype.acquireLease = function (duration, options) {
        var _a, _b, _c, _d, _e, _f;
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _g, span, updatedOptions, e_1;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        _g = createSpan("BlobLeaseClient-acquireLease", options), span = _g.span, updatedOptions = _g.updatedOptions;
                        if (this._isContainer &&
                            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||
                                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||
                                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
                            throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
                        }
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this._containerOrBlobOperation.acquireLease(__assign({ abortSignal: options.abortSignal, duration: duration, modifiedAccessConditions: __assign(__assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }), proposedLeaseId: this._leaseId }, convertTracingToRequestOptionsBase(updatedOptions)))];
                    case 2: return [2 /*return*/, _h.sent()];
                    case 3:
                        e_1 = _h.sent();
                        span.setStatus({
                            code: SpanStatusCode.ERROR,
                            message: e_1.message
                        });
                        throw e_1;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * To change the ID of the lease.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param proposedLeaseId - the proposed new lease Id.
     * @param options - option to configure lease management operations.
     * @returns Response data for change lease operation.
     */
    BlobLeaseClient.prototype.changeLease = function (proposedLeaseId, options) {
        var _a, _b, _c, _d, _e, _f;
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _g, span, updatedOptions, response, e_2;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        _g = createSpan("BlobLeaseClient-changeLease", options), span = _g.span, updatedOptions = _g.updatedOptions;
                        if (this._isContainer &&
                            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||
                                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||
                                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
                            throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
                        }
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, __assign({ abortSignal: options.abortSignal, modifiedAccessConditions: __assign(__assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)))];
                    case 2:
                        response = _h.sent();
                        this._leaseId = proposedLeaseId;
                        return [2 /*return*/, response];
                    case 3:
                        e_2 = _h.sent();
                        span.setStatus({
                            code: SpanStatusCode.ERROR,
                            message: e_2.message
                        });
                        throw e_2;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * To free the lease if it is no longer needed so that another client may
     * immediately acquire a lease against the container or the blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param options - option to configure lease management operations.
     * @returns Response data for release lease operation.
     */
    BlobLeaseClient.prototype.releaseLease = function (options) {
        var _a, _b, _c, _d, _e, _f;
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _g, span, updatedOptions, e_3;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        _g = createSpan("BlobLeaseClient-releaseLease", options), span = _g.span, updatedOptions = _g.updatedOptions;
                        if (this._isContainer &&
                            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||
                                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||
                                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
                            throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
                        }
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this._containerOrBlobOperation.releaseLease(this._leaseId, __assign({ abortSignal: options.abortSignal, modifiedAccessConditions: __assign(__assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)))];
                    case 2: return [2 /*return*/, _h.sent()];
                    case 3:
                        e_3 = _h.sent();
                        span.setStatus({
                            code: SpanStatusCode.ERROR,
                            message: e_3.message
                        });
                        throw e_3;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * To renew the lease.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param options - Optional option to configure lease management operations.
     * @returns Response data for renew lease operation.
     */
    BlobLeaseClient.prototype.renewLease = function (options) {
        var _a, _b, _c, _d, _e, _f;
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _g, span, updatedOptions, e_4;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        _g = createSpan("BlobLeaseClient-renewLease", options), span = _g.span, updatedOptions = _g.updatedOptions;
                        if (this._isContainer &&
                            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||
                                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||
                                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
                            throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
                        }
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this._containerOrBlobOperation.renewLease(this._leaseId, __assign({ abortSignal: options.abortSignal, modifiedAccessConditions: __assign(__assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)))];
                    case 2: return [2 /*return*/, _h.sent()];
                    case 3:
                        e_4 = _h.sent();
                        span.setStatus({
                            code: SpanStatusCode.ERROR,
                            message: e_4.message
                        });
                        throw e_4;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * To end the lease but ensure that another client cannot acquire a new lease
     * until the current lease period has expired.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param breakPeriod - Break period
     * @param options - Optional options to configure lease management operations.
     * @returns Response data for break lease operation.
     */
    BlobLeaseClient.prototype.breakLease = function (breakPeriod, options) {
        var _a, _b, _c, _d, _e, _f;
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _g, span, updatedOptions, operationOptions, e_5;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        _g = createSpan("BlobLeaseClient-breakLease", options), span = _g.span, updatedOptions = _g.updatedOptions;
                        if (this._isContainer &&
                            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||
                                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||
                                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
                            throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
                        }
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 3, 4, 5]);
                        operationOptions = __assign({ abortSignal: options.abortSignal, breakPeriod: breakPeriod, modifiedAccessConditions: __assign(__assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions));
                        return [4 /*yield*/, this._containerOrBlobOperation.breakLease(operationOptions)];
                    case 2: return [2 /*return*/, _h.sent()];
                    case 3:
                        e_5 = _h.sent();
                        span.setStatus({
                            code: SpanStatusCode.ERROR,
                            message: e_5.message
                        });
                        throw e_5;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return BlobLeaseClient;
}());
export { BlobLeaseClient };
//# sourceMappingURL=BlobLeaseClient.js.map