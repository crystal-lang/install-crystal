{"version":3,"file":"BlobQuickQueryStream.js","sourceRoot":"","sources":["../../../../src/utils/BlobQuickQueryStream.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Readable } from \"stream\";\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { TransferProgressEvent } from \"@azure/core-http\";\n\nimport { AvroReadableFromStream, AvroReader } from \"../../../storage-internal-avro/src\";\nimport { BlobQueryError } from \"../Clients\";\n\nexport interface BlobQuickQueryStreamOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Read progress event handler\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback to receive error events during the query operaiton.\n   */\n  onError?: (error: BlobQueryError) => void;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * A Node.js BlobQuickQueryStream will internally parse avro data stream for blob query.\n */\nexport class BlobQuickQueryStream extends Readable {\n  private source: NodeJS.ReadableStream;\n  private avroReader: AvroReader;\n  private avroIter: AsyncIterableIterator<Object | null>;\n  private avroPaused: boolean = true;\n  private onProgress?: (progress: TransferProgressEvent) => void;\n  private onError?: (error: BlobQueryError) => void;\n\n  /**\n   * Creates an instance of BlobQuickQueryStream.\n   *\n   * @param source - The current ReadableStream returned from getter\n   * @param options -\n   */\n  public constructor(source: NodeJS.ReadableStream, options: BlobQuickQueryStreamOptions = {}) {\n    super();\n    this.source = source;\n    this.onProgress = options.onProgress;\n    this.onError = options.onError;\n    this.avroReader = new AvroReader(new AvroReadableFromStream(this.source));\n    this.avroIter = this.avroReader.parseObjects({ abortSignal: options.abortSignal });\n  }\n\n  public _read() {\n    if (this.avroPaused) {\n      this.readInternal().catch((err) => {\n        this.emit(\"error\", err);\n      });\n    }\n  }\n\n  private async readInternal() {\n    this.avroPaused = false;\n    let avroNext;\n    do {\n      avroNext = await this.avroIter.next();\n      if (avroNext.done) {\n        break;\n      }\n      const obj = avroNext.value;\n      const schema = (obj as any).$schema;\n      if (typeof schema !== \"string\") {\n        throw Error(\"Missing schema in avro record.\");\n      }\n\n      switch (schema) {\n        case \"com.microsoft.azure.storage.queryBlobContents.resultData\":\n          const data = (obj as any).data;\n          if (data instanceof Uint8Array === false) {\n            throw Error(\"Invalid data in avro result record.\");\n          }\n          if (!this.push(Buffer.from(data))) {\n            this.avroPaused = true;\n          }\n          break;\n        case \"com.microsoft.azure.storage.queryBlobContents.progress\":\n          const bytesScanned = (obj as any).bytesScanned;\n          if (typeof bytesScanned !== \"number\") {\n            throw Error(\"Invalid bytesScanned in avro progress record.\");\n          }\n          if (this.onProgress) {\n            this.onProgress({ loadedBytes: bytesScanned });\n          }\n          break;\n        case \"com.microsoft.azure.storage.queryBlobContents.end\":\n          if (this.onProgress) {\n            const totalBytes = (obj as any).totalBytes;\n            if (typeof totalBytes !== \"number\") {\n              throw Error(\"Invalid totalBytes in avro end record.\");\n            }\n            this.onProgress({ loadedBytes: totalBytes });\n          }\n          this.push(null);\n          break;\n        case \"com.microsoft.azure.storage.queryBlobContents.error\":\n          if (this.onError) {\n            const fatal = (obj as any).fatal;\n            if (typeof fatal !== \"boolean\") {\n              throw Error(\"Invalid fatal in avro error record.\");\n            }\n            const name = (obj as any).name;\n            if (typeof name !== \"string\") {\n              throw Error(\"Invalid name in avro error record.\");\n            }\n            const description = (obj as any).description;\n            if (typeof description !== \"string\") {\n              throw Error(\"Invalid description in avro error record.\");\n            }\n            const position = (obj as any).position;\n            if (typeof position !== \"number\") {\n              throw Error(\"Invalid position in avro error record.\");\n            }\n            this.onError({\n              position,\n              name,\n              isFatal: fatal,\n              description\n            });\n          }\n          break;\n        default:\n          throw Error(`Unknown schema ${schema} in avro progress record.`);\n      }\n    } while (!avroNext.done && !this.avroPaused);\n  }\n}\n"]}