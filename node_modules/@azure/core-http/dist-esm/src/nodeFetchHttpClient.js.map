{"version":3,"file":"nodeFetchHttpClient.js","sourceRoot":"","sources":["../../src/nodeFetchHttpClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as tough from \"tough-cookie\";\nimport * as http from \"http\";\nimport * as https from \"https\";\nimport node_fetch from \"node-fetch\";\n\nimport {\n  FetchHttpClient,\n  CommonRequestInfo,\n  CommonRequestInit,\n  CommonResponse\n} from \"./fetchHttpClient\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { WebResourceLike } from \"./webResource\";\nimport { createProxyAgent, ProxyAgent, isUrlHttps } from \"./proxyAgent\";\n\ninterface AgentCache {\n  httpAgent?: http.Agent;\n  httpsAgent?: https.Agent;\n}\n\nfunction getCachedAgent(\n  isHttps: boolean,\n  agentCache: AgentCache\n): http.Agent | https.Agent | undefined {\n  return isHttps ? agentCache.httpsAgent : agentCache.httpAgent;\n}\n\nexport class NodeFetchHttpClient extends FetchHttpClient {\n  private proxyAgents: AgentCache = {};\n  private keepAliveAgents: AgentCache = {};\n\n  private readonly cookieJar = new tough.CookieJar(undefined, { looseMode: true });\n\n  private getOrCreateAgent(httpRequest: WebResourceLike): http.Agent | https.Agent {\n    const isHttps = isUrlHttps(httpRequest.url);\n\n    // At the moment, proxy settings and keepAlive are mutually\n    // exclusive because the 'tunnel' library currently lacks the\n    // ability to create a proxy with keepAlive turned on.\n    if (httpRequest.proxySettings) {\n      let agent = getCachedAgent(isHttps, this.proxyAgents);\n      if (agent) {\n        return agent;\n      }\n\n      const tunnel: ProxyAgent = createProxyAgent(\n        httpRequest.url,\n        httpRequest.proxySettings,\n        httpRequest.headers\n      );\n\n      agent = tunnel.agent;\n      if (tunnel.isHttps) {\n        this.proxyAgents.httpsAgent = tunnel.agent as https.Agent;\n      } else {\n        this.proxyAgents.httpAgent = tunnel.agent;\n      }\n\n      return agent;\n    } else if (httpRequest.keepAlive) {\n      let agent = getCachedAgent(isHttps, this.keepAliveAgents);\n      if (agent) {\n        return agent;\n      }\n\n      const agentOptions: http.AgentOptions | https.AgentOptions = {\n        keepAlive: httpRequest.keepAlive\n      };\n\n      if (isHttps) {\n        agent = this.keepAliveAgents.httpsAgent = new https.Agent(agentOptions);\n      } else {\n        agent = this.keepAliveAgents.httpAgent = new http.Agent(agentOptions);\n      }\n\n      return agent;\n    } else {\n      return isHttps ? https.globalAgent : http.globalAgent;\n    }\n  }\n\n  // eslint-disable-next-line @azure/azure-sdk/ts-apisurface-standardized-verbs\n  async fetch(input: CommonRequestInfo, init?: CommonRequestInit): Promise<CommonResponse> {\n    return (node_fetch(input, init) as unknown) as Promise<CommonResponse>;\n  }\n\n  async prepareRequest(httpRequest: WebResourceLike): Promise<Partial<RequestInit>> {\n    const requestInit: Partial<RequestInit & { agent?: any; compress?: boolean }> = {};\n\n    if (this.cookieJar && !httpRequest.headers.get(\"Cookie\")) {\n      const cookieString = await new Promise<string>((resolve, reject) => {\n        this.cookieJar!.getCookieString(httpRequest.url, (err, cookie) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(cookie);\n          }\n        });\n      });\n\n      httpRequest.headers.set(\"Cookie\", cookieString);\n    }\n\n    // Set the http(s) agent\n    requestInit.agent = this.getOrCreateAgent(httpRequest);\n\n    requestInit.compress = httpRequest.decompressResponse;\n\n    return requestInit;\n  }\n\n  async processRequest(operationResponse: HttpOperationResponse): Promise<void> {\n    if (this.cookieJar) {\n      const setCookieHeader = operationResponse.headers.get(\"Set-Cookie\");\n      if (setCookieHeader !== undefined) {\n        await new Promise<void>((resolve, reject) => {\n          this.cookieJar!.setCookie(\n            setCookieHeader,\n            operationResponse.request.url,\n            { ignoreError: true },\n            (err) => {\n              if (err) {\n                reject(err);\n              } else {\n                resolve();\n              }\n            }\n          );\n        });\n      }\n    }\n  }\n}\n"]}