{"version":3,"file":"tracingPolicy.js","sourceRoot":"","sources":["../../../src/policies/tracingPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  getTraceParentHeader,\n  createSpanFunction,\n  SpanKind,\n  SpanStatusCode\n} from \"@azure/core-tracing\";\nimport {\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions,\n  BaseRequestPolicy\n} from \"./requestPolicy\";\nimport { WebResourceLike } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\n\nconst createSpan = createSpanFunction({\n  packagePrefix: \"\",\n  namespace: \"\"\n});\n\nexport interface TracingPolicyOptions {\n  userAgent?: string;\n}\n\nexport function tracingPolicy(tracingOptions: TracingPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      return new TracingPolicy(nextPolicy, options, tracingOptions);\n    }\n  };\n}\n\nexport class TracingPolicy extends BaseRequestPolicy {\n  private userAgent?: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    tracingOptions: TracingPolicyOptions\n  ) {\n    super(nextPolicy, options);\n    this.userAgent = tracingOptions.userAgent;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!request.tracingContext) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    // create a new span\n    const path = URLBuilder.parse(request.url).getPath() || \"/\";\n\n    const { span } = createSpan(path, {\n      tracingOptions: {\n        spanOptions: {\n          ...request.spanOptions,\n          kind: SpanKind.CLIENT\n        },\n        tracingContext: request.tracingContext\n      }\n    });\n\n    span.setAttributes({\n      \"http.method\": request.method,\n      \"http.url\": request.url,\n      requestId: request.requestId\n    });\n\n    if (this.userAgent) {\n      span.setAttribute(\"http.user_agent\", this.userAgent);\n    }\n\n    try {\n      // set headers\n      const spanContext = span.context();\n      const traceParentHeader = getTraceParentHeader(spanContext);\n      if (traceParentHeader) {\n        request.headers.set(\"traceparent\", traceParentHeader);\n        const traceState = spanContext.traceState && spanContext.traceState.serialize();\n        // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n        if (traceState) {\n          request.headers.set(\"tracestate\", traceState);\n        }\n      }\n\n      const response = await this._nextPolicy.sendRequest(request);\n      span.setAttribute(\"http.status_code\", response.status);\n      const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n      if (serviceRequestId) {\n        span.setAttribute(\"serviceRequestId\", serviceRequestId);\n      }\n      span.setStatus({\n        code: SpanStatusCode.OK\n      });\n      return response;\n    } catch (err) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message\n      });\n      span.setAttribute(\"http.status_code\", err.statusCode);\n      throw err;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}