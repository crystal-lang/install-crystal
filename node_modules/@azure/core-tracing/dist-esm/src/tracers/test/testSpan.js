// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __extends } from "tslib";
import { SpanStatusCode } from "../../interfaces";
import { NoOpSpan } from "../noop/noOpSpan";
/**
 * A mock span useful for testing.
 */
var TestSpan = /** @class */ (function (_super) {
    __extends(TestSpan, _super);
    /**
     * Starts a new Span.
     * @param parentTracer-  The tracer that created this Span
     * @param name - The name of the span.
     * @param context - The SpanContext this span belongs to
     * @param kind - The SpanKind of this Span
     * @param parentSpanId - The identifier of the parent Span
     * @param startTime - The startTime of the event (defaults to now)
     */
    function TestSpan(parentTracer, name, context, kind, parentSpanId, startTime) {
        if (startTime === void 0) { startTime = Date.now(); }
        var _this = _super.call(this) || this;
        _this._tracer = parentTracer;
        _this.name = name;
        _this.kind = kind;
        _this.startTime = startTime;
        _this.parentSpanId = parentSpanId;
        _this.status = {
            code: SpanStatusCode.OK
        };
        _this.endCalled = false;
        _this._context = context;
        _this.attributes = {};
        return _this;
    }
    /**
     * Returns the Tracer that created this Span
     */
    TestSpan.prototype.tracer = function () {
        return this._tracer;
    };
    /**
     * Returns the SpanContext associated with this Span.
     */
    TestSpan.prototype.context = function () {
        return this._context;
    };
    /**
     * Marks the end of Span execution.
     * @param _endTime - The time to use as the Span's end time. Defaults to
     * the current time.
     */
    TestSpan.prototype.end = function (_endTime) {
        this.endCalled = true;
    };
    /**
     * Sets a status on the span. Overrides the default of SpanStatusCode.OK.
     * @param status - The status to set.
     */
    TestSpan.prototype.setStatus = function (status) {
        this.status = status;
        return this;
    };
    /**
     * Returns whether this span will be recorded
     */
    TestSpan.prototype.isRecording = function () {
        return true;
    };
    /**
     * Sets an attribute on the Span
     * @param key - The attribute key
     * @param value - The attribute value
     */
    TestSpan.prototype.setAttribute = function (key, value) {
        this.attributes[key] = value;
        return this;
    };
    /**
     * Sets attributes on the Span
     * @param attributes - The attributes to add
     */
    TestSpan.prototype.setAttributes = function (attributes) {
        for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {
            var key = _a[_i];
            this.attributes[key] = attributes[key];
        }
        return this;
    };
    return TestSpan;
}(NoOpSpan));
export { TestSpan };
//# sourceMappingURL=testSpan.js.map