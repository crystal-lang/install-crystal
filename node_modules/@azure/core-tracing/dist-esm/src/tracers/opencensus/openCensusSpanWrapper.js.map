{"version":3,"file":"openCensusSpanWrapper.js","sourceRoot":"","sources":["../../../../src/tracers/opencensus/openCensusSpanWrapper.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAEL,OAAO,IAAI,SAAS,EASpB,cAAc,EACd,OAAO,EACR,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,2BAA2B,EAAE,MAAM,+BAA+B,CAAC;AAI5E,gDAAgD;AAChD,IAAK,aAWJ;AAXD,WAAK,aAAa;IAChB;;OAEG;IACH,6CAAM,CAAA;IACN;;;;OAIG;IACH,0DAAa,CAAA;AACf,CAAC,EAXI,aAAa,KAAb,aAAa,QAWjB;AAED,SAAS,aAAa,CAAC,IAAgC;IACrD,OAAO,CAAC,CAAC,IAAI,IAAK,IAA8B,CAAC,cAAc,KAAK,SAAS,CAAC;AAChF,CAAC;AAED,SAAS,QAAQ,CACf,YAAsD;IAEtD,OAAQ,YAAwC,CAAC,gBAAgB,KAAK,SAAS,CAAC;AAClF,CAAC;AAED;;GAEG;AACH;IA4BE,+BACE,YAAsD,EACtD,IAAiB,EACjB,OAAyB,EACzB,OAAmB;QAFnB,qBAAA,EAAA,SAAiB;QACjB,wBAAA,EAAA,YAAyB;QAGzB,IAAI,QAAQ,CAAC,YAAY,CAAC,EAAE;YAC1B,IAAM,IAAI,GAAG,OAAO,CAAC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;YACpD,IAAM,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;YACvE,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,gBAAgB,EAAE,CAAC,cAAc,CAAC;gBAC1D,IAAI,MAAA;gBACJ,OAAO,EAAE,MAAM;aAChB,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,OAAO,CAAC,KAAK,EAAE;gBACjB,KAAmB,UAAa,EAAb,KAAA,OAAO,CAAC,KAAK,EAAb,cAAa,EAAb,IAAa,EAAE;oBAA7B,IAAM,IAAI,SAAA;oBACb,+EAA+E;oBAC/E,IAAI,CAAC,KAAK,CAAC,OAAO,CAChB,IAAI,CAAC,OAAO,CAAC,OAAO,EACpB,IAAI,CAAC,OAAO,CAAC,MAAM,EACnB,CAAC,CAAC,0BAA0B,EAC5B,IAAI,CAAC,UAAkC,CACxC,CAAC;iBACH;aACF;SACF;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC;SAC3B;IACH,CAAC;IArDD;;OAEG;IACI,8CAAc,GAArB;QACE,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAkDD;;;;OAIG;IACH,mCAAG,GAAH,UAAI,QAAiB;QACnB,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,uCAAO,GAAP;QACE,IAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;QAErD,OAAO;YACL,MAAM,EAAE,qBAAqB,CAAC,MAAM;YACpC,OAAO,EAAE,qBAAqB,CAAC,OAAO;YACtC,UAAU,EAAE,qBAAqB,CAAC,OAAqB;YACvD,UAAU,EAAE,IAAI,2BAA2B,CAAC,qBAAqB,CAAC,UAAU,CAAC;SAC9E,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,4CAAY,GAAZ,UAAa,GAAW,EAAE,KAAc;QACtC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,KAAY,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,6CAAa,GAAb,UAAc,UAA0B;QACtC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,UAAkC,CAAC;QAC3D,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,wCAAQ,GAAR,UAAS,KAAa,EAAE,WAA4B;QAClD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACH,yCAAS,GAAT,UAAU,MAAkB;QAC1B,QAAQ,MAAM,CAAC,IAAI,EAAE;YACnB,KAAK,cAAc,CAAC,KAAK,CAAC,CAAC;gBACzB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC7D,MAAM;aACP;YACD,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC;gBACtB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;gBACvD,MAAM;aACP;YACD,KAAK,cAAc,CAAC,KAAK,CAAC,CAAC;gBACzB,MAAM;aACP;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,0CAAU,GAAV,UAAW,IAAY;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,2CAAW,GAAX;QACE,sCAAsC;QACtC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;IAC9B,CAAC;IAED;;;;;OAKG;IACH,+CAAe,GAAf,UAAgB,UAAqB,EAAE,KAAiB;QACtD,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC5C,CAAC;IACH,4BAAC;AAAD,CAAC,AA7JD,IA6JC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  Context as OTContext,\n  context as otContext,\n  SpanContext,\n  Span,\n  SpanOptions,\n  SpanAttributes,\n  SpanStatus,\n  TraceFlags,\n  Exception,\n  TimeInput,\n  SpanStatusCode,\n  getSpan\n} from \"../../interfaces\";\nimport { OpenCensusTraceStateWrapper } from \"./openCensusTraceStateWrapper\";\nimport { OpenCensusTracerWrapper } from \"./openCensusTracerWrapper\";\nimport { Attributes as OpenCensusAttributes, Span as OpenCensusSpan } from \"@opencensus/web-types\";\n\n/** An enumeration of canonical status codes. */\nenum CanonicalCode {\n  /**\n   * Not an error; returned on success\n   */\n  OK = 0,\n  /**\n   * Internal errors.  Means some invariants expected by underlying\n   * system has been broken.  If you see one of these errors,\n   * something is very broken.\n   */\n  INTERNAL = 13\n}\n\nfunction isWrappedSpan(span?: Span | SpanContext | null): span is OpenCensusSpanWrapper {\n  return !!span && (span as OpenCensusSpanWrapper).getWrappedSpan !== undefined;\n}\n\nfunction isTracer(\n  tracerOrSpan: OpenCensusTracerWrapper | OpenCensusSpan\n): tracerOrSpan is OpenCensusTracerWrapper {\n  return (tracerOrSpan as OpenCensusTracerWrapper).getWrappedTracer !== undefined;\n}\n\n/**\n * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.\n */\nexport class OpenCensusSpanWrapper implements Span {\n  private _span: OpenCensusSpan;\n\n  /**\n   * The underlying OpenCensus Span\n   */\n  public getWrappedSpan(): OpenCensusSpan {\n    return this._span;\n  }\n\n  /**\n   * Wraps an existing OpenCensus Span\n   * @param span - A Span or RootSpan from OpenCensus\n   */\n  constructor(span: OpenCensusSpan);\n  /**\n   * Create a new OpenCensus Span and wrap it.\n   * @param tracer - The OpenCensus tracer that has been wrapped in OpenCensusTracerWrapper\n   * @param name - The name of the Span\n   * @param options - Options for the Span\n   * @param context - The context for the Span.\n   */\n  constructor(\n    tracer: OpenCensusTracerWrapper,\n    name: string,\n    options?: SpanOptions,\n    context?: OTContext\n  );\n  constructor(\n    tracerOrSpan: OpenCensusTracerWrapper | OpenCensusSpan,\n    name: string = \"\",\n    options: SpanOptions = {},\n    context?: OTContext\n  ) {\n    if (isTracer(tracerOrSpan)) {\n      const span = getSpan(context ?? otContext.active());\n      const parent = isWrappedSpan(span) ? span.getWrappedSpan() : undefined;\n      this._span = tracerOrSpan.getWrappedTracer().startChildSpan({\n        name,\n        childOf: parent\n      });\n      this._span.start();\n      if (options.links) {\n        for (const link of options.links) {\n          // Since there is no way to set the link relationship, leave it as Unspecified.\n          this._span.addLink(\n            link.context.traceId,\n            link.context.spanId,\n            0 /* LinkType.UNSPECIFIED */,\n            link.attributes as OpenCensusAttributes\n          );\n        }\n      }\n    } else {\n      this._span = tracerOrSpan;\n    }\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param endTime - The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    this._span.end();\n  }\n\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  context(): SpanContext {\n    const openCensusSpanContext = this._span.spanContext;\n\n    return {\n      spanId: openCensusSpanContext.spanId,\n      traceId: openCensusSpanContext.traceId,\n      traceFlags: openCensusSpanContext.options as TraceFlags,\n      traceState: new OpenCensusTraceStateWrapper(openCensusSpanContext.traceState)\n    };\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param key - The attribute key\n   * @param value - The attribute value\n   */\n  setAttribute(key: string, value: unknown): this {\n    this._span.addAttribute(key, value as any);\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param attributes - The attributes to add\n   */\n  setAttributes(attributes: SpanAttributes): this {\n    this._span.attributes = attributes as OpenCensusAttributes;\n    return this;\n  }\n\n  /**\n   * Adds an event to the Span\n   * @param name - The name of the event\n   * @param attributes - The associated attributes to add for this event\n   */\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of SpanStatusCode.OK.\n   * @param status - The status to set.\n   */\n  setStatus(status: SpanStatus): this {\n    switch (status.code) {\n      case SpanStatusCode.ERROR: {\n        this._span.setStatus(CanonicalCode.INTERNAL, status.message);\n        break;\n      }\n      case SpanStatusCode.OK: {\n        this._span.setStatus(CanonicalCode.OK, status.message);\n        break;\n      }\n      case SpanStatusCode.UNSET: {\n        break;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates the name of the Span\n   * @param name - The new Span name\n   */\n  updateName(name: string): this {\n    this._span.name = name;\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecording(): boolean {\n    // NoRecordSpans have an empty traceId\n    return !!this._span.traceId;\n  }\n\n  /**\n   * Sets exception as a span event\n   * @param exception - the exception the only accepted values are string or Error\n   * @param time - the time to set as Span's event time. If not provided,\n   *     use the current time.\n   */\n  recordException(_exception: Exception, _time?: TimeInput): void {\n    throw new Error(\"Method not implemented\");\n  }\n}\n"]}