'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var api = require('@opentelemetry/api');
var tslib = require('tslib');

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A no-op implementation of Span that can safely be used without side-effects.
 */
var NoOpSpan = /** @class */ (function () {
    function NoOpSpan() {
    }
    /**
     * Returns the SpanContext associated with this Span.
     */
    NoOpSpan.prototype.context = function () {
        return {
            spanId: "",
            traceId: "",
            traceFlags: 0 /* NONE */
        };
    };
    /**
     * Marks the end of Span execution.
     * @param _endTime - The time to use as the Span's end time. Defaults to
     * the current time.
     */
    NoOpSpan.prototype.end = function (_endTime) {
        /* Noop */
    };
    /**
     * Sets an attribute on the Span
     * @param _key - The attribute key
     * @param _value - The attribute value
     */
    NoOpSpan.prototype.setAttribute = function (_key, _value) {
        return this;
    };
    /**
     * Sets attributes on the Span
     * @param _attributes - The attributes to add
     */
    NoOpSpan.prototype.setAttributes = function (_attributes) {
        return this;
    };
    /**
     * Adds an event to the Span
     * @param _name - The name of the event
     * @param _attributes - The associated attributes to add for this event
     */
    NoOpSpan.prototype.addEvent = function (_name, _attributes) {
        return this;
    };
    /**
     * Sets a status on the span. Overrides the default of SpanStatusCode.OK.
     * @param _status - The status to set.
     */
    NoOpSpan.prototype.setStatus = function (_status) {
        return this;
    };
    /**
     * Updates the name of the Span
     * @param _name - the new Span name
     */
    NoOpSpan.prototype.updateName = function (_name) {
        return this;
    };
    /**
     * Returns whether this span will be recorded
     */
    NoOpSpan.prototype.isRecording = function () {
        return false;
    };
    /**
     * Sets exception as a span event
     * @param exception - the exception the only accepted values are string or Error
     * @param time - the time to set as Span's event time. If not provided,
     *     use the current time.
     */
    NoOpSpan.prototype.recordException = function (_exception, _time) {
        /* do nothing */
    };
    return NoOpSpan;
}());

// Copyright (c) Microsoft Corporation.
/**
 * A no-op implementation of Tracer that can be used when tracing
 * is disabled.
 */
var NoOpTracer = /** @class */ (function () {
    function NoOpTracer() {
    }
    /**
     * Starts a new Span.
     * @param _name - The name of the span.
     * @param _options - The SpanOptions used during Span creation.
     */
    NoOpTracer.prototype.startSpan = function (_name, _options) {
        return new NoOpSpan();
    };
    /**
     * Returns the current Span from the current context, if available.
     */
    NoOpTracer.prototype.getCurrentSpan = function () {
        return new NoOpSpan();
    };
    /**
     * Executes the given function within the context provided by a Span.
     * @param _span - The span that provides the context.
     * @param fn - The function to be executed.
     */
    NoOpTracer.prototype.withSpan = function (_span, fn) {
        return fn();
    };
    /**
     * Bind a Span as the target's scope
     * @param target - An object to bind the scope.
     * @param _span - A specific Span to use. Otherwise, use the current one.
     */
    NoOpTracer.prototype.bind = function (target, _span) {
        return target;
    };
    return NoOpTracer;
}());

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function getGlobalObject() {
    return global;
}

// Copyright (c) Microsoft Corporation.
// V1 = OpenTelemetry 0.1
// V2 = OpenTelemetry 0.2
// V3 = OpenTelemetry 0.6.1
// V4 = OpenTelemetry 1.0.0-rc.0
var GLOBAL_TRACER_VERSION = 4;
// preview5 shipped with @azure/core-tracing.tracerCache
// and didn't have smart detection for collisions
var GLOBAL_TRACER_SYMBOL = Symbol.for("@azure/core-tracing.tracerCache3");
var cache;
function loadTracerCache() {
    var globalObj = getGlobalObject();
    var existingCache = globalObj[GLOBAL_TRACER_SYMBOL];
    var setGlobalCache = true;
    if (existingCache) {
        if (existingCache.version === GLOBAL_TRACER_VERSION) {
            cache = existingCache;
        }
        else {
            setGlobalCache = false;
            if (existingCache.tracer) {
                throw new Error("Two incompatible versions of @azure/core-tracing have been loaded.\n          This library is " + GLOBAL_TRACER_VERSION + ", existing is " + existingCache.version + ".");
            }
        }
    }
    if (!cache) {
        cache = {
            tracer: undefined,
            version: GLOBAL_TRACER_VERSION
        };
    }
    if (setGlobalCache) {
        globalObj[GLOBAL_TRACER_SYMBOL] = cache;
    }
}
function getCache() {
    if (!cache) {
        loadTracerCache();
    }
    return cache;
}

// Copyright (c) Microsoft Corporation.
var defaultTracer;
function getDefaultTracer() {
    if (!defaultTracer) {
        defaultTracer = new NoOpTracer();
    }
    return defaultTracer;
}
/**
 * Sets the global tracer, enabling tracing for the Azure SDK.
 * @param tracer - An OpenTelemetry Tracer instance.
 */
function setTracer(tracer) {
    var cache = getCache();
    cache.tracer = tracer;
}
/**
 * Retrieves the active tracer, or returns a
 * no-op implementation if one is not set.
 */
function getTracer() {
    var cache = getCache();
    if (!cache.tracer) {
        return getDefaultTracer();
    }
    return cache.tracer;
}

// Copyright (c) Microsoft Corporation.
(function (SpanKind) {
    /** Default value. Indicates that the span is used internally. */
    SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
    /**
     * Indicates that the span covers server-side handling of an RPC or other
     * remote request.
     */
    SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
    /**
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     */
    SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
    /**
     * Indicates that the span describes producer sending a message to a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */
    SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
    /**
     * Indicates that the span describes consumer receiving a message from a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */
    SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
})(exports.SpanKind || (exports.SpanKind = {}));
/**
 * Return the span if one exists
 *
 * @param context - context to get span from
 */
function getSpan(context) {
    return api.getSpan(context);
}
/**
 * Set the span on a context
 *
 * @param context - context to use as parent
 * @param span - span to set active
 */
function setSpan(context, span) {
    return api.setSpan(context, span);
}
/**
 * Wrap span context in a NoopSpan and set as span in a new
 * context
 *
 * @param context - context to set active span on
 * @param spanContext - span context to be wrapped
 */
function setSpanContext(context, spanContext) {
    return api.setSpanContext(context, spanContext);
}
/**
 * Get the span context of the span if it exists.
 *
 * @param context - context to get values from
 */
function getSpanContext(context) {
    return api.getSpanContext(context);
}
/** Entrypoint for context API */
var context = api.context;
(function (SpanStatusCode) {
    /**
     * The default status.
     */
    SpanStatusCode[SpanStatusCode["UNSET"] = 0] = "UNSET";
    /**
     * The operation has been validated by an Application developer or
     * Operator to have completed successfully.
     */
    SpanStatusCode[SpanStatusCode["OK"] = 1] = "OK";
    /**
     * The operation contains an error.
     */
    SpanStatusCode[SpanStatusCode["ERROR"] = 2] = "ERROR";
})(exports.SpanStatusCode || (exports.SpanStatusCode = {}));

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * @internal
 */
var OpenCensusTraceStateWrapper = /** @class */ (function () {
    function OpenCensusTraceStateWrapper(state) {
        this._state = state;
    }
    OpenCensusTraceStateWrapper.prototype.get = function (_key) {
        throw new Error("Method not implemented.");
    };
    OpenCensusTraceStateWrapper.prototype.set = function (_key, _value) {
        throw new Error("Method not implemented.");
    };
    OpenCensusTraceStateWrapper.prototype.unset = function (_key) {
        throw new Error("Method not implemented");
    };
    OpenCensusTraceStateWrapper.prototype.serialize = function () {
        return this._state || "";
    };
    return OpenCensusTraceStateWrapper;
}());

// Copyright (c) Microsoft Corporation.
/** An enumeration of canonical status codes. */
var CanonicalCode;
(function (CanonicalCode) {
    /**
     * Not an error; returned on success
     */
    CanonicalCode[CanonicalCode["OK"] = 0] = "OK";
    /**
     * Internal errors.  Means some invariants expected by underlying
     * system has been broken.  If you see one of these errors,
     * something is very broken.
     */
    CanonicalCode[CanonicalCode["INTERNAL"] = 13] = "INTERNAL";
})(CanonicalCode || (CanonicalCode = {}));
function isWrappedSpan(span) {
    return !!span && span.getWrappedSpan !== undefined;
}
function isTracer(tracerOrSpan) {
    return tracerOrSpan.getWrappedTracer !== undefined;
}
/**
 * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.
 */
var OpenCensusSpanWrapper = /** @class */ (function () {
    function OpenCensusSpanWrapper(tracerOrSpan, name, options, context$1) {
        if (name === void 0) { name = ""; }
        if (options === void 0) { options = {}; }
        if (isTracer(tracerOrSpan)) {
            var span = getSpan(context$1 !== null && context$1 !== void 0 ? context$1 : context.active());
            var parent = isWrappedSpan(span) ? span.getWrappedSpan() : undefined;
            this._span = tracerOrSpan.getWrappedTracer().startChildSpan({
                name: name,
                childOf: parent
            });
            this._span.start();
            if (options.links) {
                for (var _i = 0, _a = options.links; _i < _a.length; _i++) {
                    var link = _a[_i];
                    // Since there is no way to set the link relationship, leave it as Unspecified.
                    this._span.addLink(link.context.traceId, link.context.spanId, 0 /* LinkType.UNSPECIFIED */, link.attributes);
                }
            }
        }
        else {
            this._span = tracerOrSpan;
        }
    }
    /**
     * The underlying OpenCensus Span
     */
    OpenCensusSpanWrapper.prototype.getWrappedSpan = function () {
        return this._span;
    };
    /**
     * Marks the end of Span execution.
     * @param endTime - The time to use as the Span's end time. Defaults to
     * the current time.
     */
    OpenCensusSpanWrapper.prototype.end = function (_endTime) {
        this._span.end();
    };
    /**
     * Returns the SpanContext associated with this Span.
     */
    OpenCensusSpanWrapper.prototype.context = function () {
        var openCensusSpanContext = this._span.spanContext;
        return {
            spanId: openCensusSpanContext.spanId,
            traceId: openCensusSpanContext.traceId,
            traceFlags: openCensusSpanContext.options,
            traceState: new OpenCensusTraceStateWrapper(openCensusSpanContext.traceState)
        };
    };
    /**
     * Sets an attribute on the Span
     * @param key - The attribute key
     * @param value - The attribute value
     */
    OpenCensusSpanWrapper.prototype.setAttribute = function (key, value) {
        this._span.addAttribute(key, value);
        return this;
    };
    /**
     * Sets attributes on the Span
     * @param attributes - The attributes to add
     */
    OpenCensusSpanWrapper.prototype.setAttributes = function (attributes) {
        this._span.attributes = attributes;
        return this;
    };
    /**
     * Adds an event to the Span
     * @param name - The name of the event
     * @param attributes - The associated attributes to add for this event
     */
    OpenCensusSpanWrapper.prototype.addEvent = function (_name, _attributes) {
        throw new Error("Method not implemented.");
    };
    /**
     * Sets a status on the span. Overrides the default of SpanStatusCode.OK.
     * @param status - The status to set.
     */
    OpenCensusSpanWrapper.prototype.setStatus = function (status) {
        switch (status.code) {
            case exports.SpanStatusCode.ERROR: {
                this._span.setStatus(CanonicalCode.INTERNAL, status.message);
                break;
            }
            case exports.SpanStatusCode.OK: {
                this._span.setStatus(CanonicalCode.OK, status.message);
                break;
            }
            case exports.SpanStatusCode.UNSET: {
                break;
            }
        }
        return this;
    };
    /**
     * Updates the name of the Span
     * @param name - The new Span name
     */
    OpenCensusSpanWrapper.prototype.updateName = function (name) {
        this._span.name = name;
        return this;
    };
    /**
     * Returns whether this span will be recorded
     */
    OpenCensusSpanWrapper.prototype.isRecording = function () {
        // NoRecordSpans have an empty traceId
        return !!this._span.traceId;
    };
    /**
     * Sets exception as a span event
     * @param exception - the exception the only accepted values are string or Error
     * @param time - the time to set as Span's event time. If not provided,
     *     use the current time.
     */
    OpenCensusSpanWrapper.prototype.recordException = function (_exception, _time) {
        throw new Error("Method not implemented");
    };
    return OpenCensusSpanWrapper;
}());

// Copyright (c) Microsoft Corporation.
/**
 * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.
 */
var OpenCensusTracerWrapper = /** @class */ (function () {
    /**
     * Create a new wrapper around a given OpenCensus Tracer.
     * @param tracer - The OpenCensus Tracer to wrap.
     */
    function OpenCensusTracerWrapper(tracer) {
        this._tracer = tracer;
    }
    /**
     * The wrapped OpenCensus Tracer
     */
    OpenCensusTracerWrapper.prototype.getWrappedTracer = function () {
        return this._tracer;
    };
    /**
     * Starts a new Span.
     * @param name - The name of the span.
     * @param options - The SpanOptions used during Span creation.
     */
    OpenCensusTracerWrapper.prototype.startSpan = function (name, options) {
        return new OpenCensusSpanWrapper(this, name, options);
    };
    /**
     * Returns the current Span from the current context, if available.
     */
    OpenCensusTracerWrapper.prototype.getCurrentSpan = function () {
        return undefined;
    };
    /**
     * Executes the given function within the context provided by a Span.
     * @param _span - The span that provides the context.
     * @param _fn - The function to be executed.
     */
    OpenCensusTracerWrapper.prototype.withSpan = function (_span, _fn) {
        throw new Error("Method not implemented.");
    };
    /**
     * Bind a Span as the target's scope
     * @param target - An object to bind the scope.
     * @param _span - A specific Span to use. Otherwise, use the current one.
     */
    OpenCensusTracerWrapper.prototype.bind = function (_target, _span) {
        throw new Error("Method not implemented.");
    };
    return OpenCensusTracerWrapper;
}());

// Copyright (c) Microsoft Corporation.
/**
 * A mock span useful for testing.
 */
var TestSpan = /** @class */ (function (_super) {
    tslib.__extends(TestSpan, _super);
    /**
     * Starts a new Span.
     * @param parentTracer-  The tracer that created this Span
     * @param name - The name of the span.
     * @param context - The SpanContext this span belongs to
     * @param kind - The SpanKind of this Span
     * @param parentSpanId - The identifier of the parent Span
     * @param startTime - The startTime of the event (defaults to now)
     */
    function TestSpan(parentTracer, name, context, kind, parentSpanId, startTime) {
        if (startTime === void 0) { startTime = Date.now(); }
        var _this = _super.call(this) || this;
        _this._tracer = parentTracer;
        _this.name = name;
        _this.kind = kind;
        _this.startTime = startTime;
        _this.parentSpanId = parentSpanId;
        _this.status = {
            code: exports.SpanStatusCode.OK
        };
        _this.endCalled = false;
        _this._context = context;
        _this.attributes = {};
        return _this;
    }
    /**
     * Returns the Tracer that created this Span
     */
    TestSpan.prototype.tracer = function () {
        return this._tracer;
    };
    /**
     * Returns the SpanContext associated with this Span.
     */
    TestSpan.prototype.context = function () {
        return this._context;
    };
    /**
     * Marks the end of Span execution.
     * @param _endTime - The time to use as the Span's end time. Defaults to
     * the current time.
     */
    TestSpan.prototype.end = function (_endTime) {
        this.endCalled = true;
    };
    /**
     * Sets a status on the span. Overrides the default of SpanStatusCode.OK.
     * @param status - The status to set.
     */
    TestSpan.prototype.setStatus = function (status) {
        this.status = status;
        return this;
    };
    /**
     * Returns whether this span will be recorded
     */
    TestSpan.prototype.isRecording = function () {
        return true;
    };
    /**
     * Sets an attribute on the Span
     * @param key - The attribute key
     * @param value - The attribute value
     */
    TestSpan.prototype.setAttribute = function (key, value) {
        this.attributes[key] = value;
        return this;
    };
    /**
     * Sets attributes on the Span
     * @param attributes - The attributes to add
     */
    TestSpan.prototype.setAttributes = function (attributes) {
        for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {
            var key = _a[_i];
            this.attributes[key] = attributes[key];
        }
        return this;
    };
    return TestSpan;
}(NoOpSpan));

// Copyright (c) Microsoft Corporation.
/**
 * A mock tracer useful for testing
 */
var TestTracer = /** @class */ (function (_super) {
    tslib.__extends(TestTracer, _super);
    function TestTracer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.traceIdCounter = 0;
        _this.spanIdCounter = 0;
        _this.rootSpans = [];
        _this.knownSpans = [];
        return _this;
    }
    TestTracer.prototype.getNextTraceId = function () {
        this.traceIdCounter++;
        return String(this.traceIdCounter);
    };
    TestTracer.prototype.getNextSpanId = function () {
        this.spanIdCounter++;
        return String(this.spanIdCounter);
    };
    /**
     * Returns all Spans that were created without a parent
     */
    TestTracer.prototype.getRootSpans = function () {
        return this.rootSpans;
    };
    /**
     * Returns all Spans this Tracer knows about
     */
    TestTracer.prototype.getKnownSpans = function () {
        return this.knownSpans;
    };
    /**
     * Returns all Spans where end() has not been called
     */
    TestTracer.prototype.getActiveSpans = function () {
        return this.knownSpans.filter(function (span) {
            return !span.endCalled;
        });
    };
    /**
     * Return all Spans for a particular trace, grouped by their
     * parent Span in a tree-like structure
     * @param traceId - The traceId to return the graph for
     */
    TestTracer.prototype.getSpanGraph = function (traceId) {
        var traceSpans = this.knownSpans.filter(function (span) {
            return span.context().traceId === traceId;
        });
        var roots = [];
        var nodeMap = new Map();
        for (var _i = 0, traceSpans_1 = traceSpans; _i < traceSpans_1.length; _i++) {
            var span = traceSpans_1[_i];
            var spanId = span.context().spanId;
            var node = {
                name: span.name,
                children: []
            };
            nodeMap.set(spanId, node);
            if (span.parentSpanId) {
                var parent = nodeMap.get(span.parentSpanId);
                if (!parent) {
                    throw new Error("Span with name " + node.name + " has an unknown parentSpan with id " + span.parentSpanId);
                }
                parent.children.push(node);
            }
            else {
                roots.push(node);
            }
        }
        return {
            roots: roots
        };
    };
    /**
     * Starts a new Span.
     * @param name - The name of the span.
     * @param options - The SpanOptions used during Span creation.
     */
    TestTracer.prototype.startSpan = function (name, options, context$1) {
        var parentContext = getSpanContext(context$1 || context.active());
        var traceId;
        var isRootSpan = false;
        if (parentContext && parentContext.traceId) {
            traceId = parentContext.traceId;
        }
        else {
            traceId = this.getNextTraceId();
            isRootSpan = true;
        }
        var spanContext = {
            traceId: traceId,
            spanId: this.getNextSpanId(),
            traceFlags: 0 /* NONE */
        };
        var span = new TestSpan(this, name, spanContext, (options === null || options === void 0 ? void 0 : options.kind) || exports.SpanKind.INTERNAL, parentContext ? parentContext.spanId : undefined, options === null || options === void 0 ? void 0 : options.startTime);
        this.knownSpans.push(span);
        if (isRootSpan) {
            this.rootSpans.push(span);
        }
        return span;
    };
    return TestTracer;
}(NoOpTracer));

// Copyright (c) Microsoft Corporation.
/**
 * Creates a function that can be used to create spans using the global tracer.
 *
 * Usage:
 *
 * ```typescript
 * // once
 * const createSpan = createSpanFunction({ packagePrefix: "Azure.Data.AppConfiguration", namespace: "Microsoft.AppConfiguration" });
 *
 * // in each operation
 * const span = createSpan("deleteConfigurationSetting", operationOptions);
 *    // code...
 * span.end();
 * ```
 *
 * @hidden
 * @param args - allows configuration of the prefix for each span as well as the az.namespace field.
 */
function createSpanFunction(args) {
    return function (operationName, operationOptions) {
        var tracer = getTracer();
        var tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};
        var spanOptions = tslib.__assign({ kind: exports.SpanKind.INTERNAL }, tracingOptions.spanOptions);
        var spanName = args.packagePrefix ? args.packagePrefix + "." + operationName : operationName;
        var span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);
        if (args.namespace) {
            span.setAttribute("az.namespace", args.namespace);
        }
        var newSpanOptions = tracingOptions.spanOptions || {};
        if (span.isRecording() && args.namespace) {
            newSpanOptions = tslib.__assign(tslib.__assign({}, tracingOptions.spanOptions), { attributes: tslib.__assign(tslib.__assign({}, spanOptions.attributes), { "az.namespace": args.namespace }) });
        }
        var newTracingOptions = tslib.__assign(tslib.__assign({}, tracingOptions), { spanOptions: newSpanOptions, tracingContext: setSpan(tracingOptions.tracingContext || context.active(), span) });
        var newOperationOptions = tslib.__assign(tslib.__assign({}, operationOptions), { tracingOptions: newTracingOptions });
        return {
            span: span,
            updatedOptions: newOperationOptions
        };
    };
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var VERSION = "00";
/**
 * Generates a `SpanContext` given a `traceparent` header value.
 * @param traceParent - Serialized span context data as a `traceparent` header value.
 * @returns The `SpanContext` generated from the `traceparent` value.
 */
function extractSpanContextFromTraceParentHeader(traceParentHeader) {
    var parts = traceParentHeader.split("-");
    if (parts.length !== 4) {
        return;
    }
    var version = parts[0], traceId = parts[1], spanId = parts[2], traceOptions = parts[3];
    if (version !== VERSION) {
        return;
    }
    var traceFlags = parseInt(traceOptions, 16);
    var spanContext = {
        spanId: spanId,
        traceId: traceId,
        traceFlags: traceFlags
    };
    return spanContext;
}
/**
 * Generates a `traceparent` value given a span context.
 * @param spanContext - Contains context for a specific span.
 * @returns The `spanContext` represented as a `traceparent` value.
 */
function getTraceParentHeader(spanContext) {
    var missingFields = [];
    if (!spanContext.traceId) {
        missingFields.push("traceId");
    }
    if (!spanContext.spanId) {
        missingFields.push("spanId");
    }
    if (missingFields.length) {
        return;
    }
    var flags = spanContext.traceFlags || 0 /* NONE */;
    var hexFlags = flags.toString(16);
    var traceFlags = hexFlags.length === 1 ? "0" + hexFlags : hexFlags;
    // https://www.w3.org/TR/trace-context/#traceparent-header-field-values
    return VERSION + "-" + spanContext.traceId + "-" + spanContext.spanId + "-" + traceFlags;
}

exports.NoOpSpan = NoOpSpan;
exports.NoOpTracer = NoOpTracer;
exports.OpenCensusSpanWrapper = OpenCensusSpanWrapper;
exports.OpenCensusTracerWrapper = OpenCensusTracerWrapper;
exports.TestSpan = TestSpan;
exports.TestTracer = TestTracer;
exports.context = context;
exports.createSpanFunction = createSpanFunction;
exports.extractSpanContextFromTraceParentHeader = extractSpanContextFromTraceParentHeader;
exports.getSpan = getSpan;
exports.getSpanContext = getSpanContext;
exports.getTraceParentHeader = getTraceParentHeader;
exports.getTracer = getTracer;
exports.setSpan = setSpan;
exports.setSpanContext = setSpanContext;
exports.setTracer = setTracer;
//# sourceMappingURL=index.js.map
